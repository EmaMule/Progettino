/*padding: 0; rimuove il padding predefinito degli elementi HTML.
margin: 0; rimuove i margini predefiniti degli elementi HTML.
box-sizing: border-box; imposta il box-sizing degli elementi HTML come border-box, 
            il che significa che l'ampiezza e l'altezza degli elementi includerà il bordo e il padding al loro interno, 
            ma non il margine esterno.
font-family: "Poppins",sans-serif imposta la famiglia di caratteri per il testo del documento come "Poppins" con un fallback 
              a una famiglia di caratteri sans-serif se "Poppins" non è disponibile.
*/
/*
La proprietà CSS "flex-wrap: wrap;" impostata sull'elemento con classe "row" rende la griglia flessibile e responsiva. 
Quando lo schermo diventa più piccolo, gli elementi figli si avvolgono automaticamente per adattarsi allo spazio disponibile. 
Inoltre, le unità di misura "em" utilizzate per impostare le dimensioni e il padding degli elementi si adattano in base 
alla dimensione del testo. Ciò significa che gli elementi saranno dimensionati proporzionalmente al testo, rendendo il 
layout più flessibile e adattabile a schermi di diverse dimensioni.*/

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  font-family: sans-serif;
}
body {
  background-color: white;
}
/*border: 1px solid orange; imposta un bordo solido arancione di 1 pixel attorno all'elemento.
display: flex; imposta il valore della proprietà CSS display sull'elemento a flex. Ciò significa che 
l'elemento verrà visualizzato come un contenitore flessibile che può contenere uno o più elementi figli. 
Questo è il primo passo per impostare una griglia flessibile.
flex-wrap: wrap; imposta la proprietà CSS flex-wrap sull'elemento a wrap. Ciò significa che gli elementi figli del 
contenitore flessibile possono essere avvolti in modo da adattarsi al contenitore quando la larghezza dello schermo è ridotta.
padding: 2em 1em; imposta un riempimento interno di 2 "em" sull'asse y e di 1 "em" sull'asse x. 
Questo crea uno spazio interno attorno ai figli dell'elemento, senza influire sulla larghezza e 
sull'altezza complessive dell'elemento.*/
.row {
  display: flex;
  flex-wrap: wrap;
  padding: 2em 4em;
  text-align: center; /* Questo mi ha spostato nome,descrizione e icone al centro sotto l'immagine*/
}
.column {
  width: 100%; /* Se si mette un'altra dimensione, le colonne possono mettersi una accanto all'altra con dimensioni pagina
                  più piccole */
  padding: 2em 0; /* Distanza tra le colonne quando sono uno una riga */
}
h1 {
  text-align: center;
  width: 100%;
  font-size: 10em;
  color: black;
}
/*Il codice fornito rappresenta due regole CSS: la prima, .box, definisce lo stile di base per un elemento 
che ha l'attributo class impostato su "box". La seconda, .box .img-container, 
definisce lo stile per un elemento figlio di un elemento con classe "box" che ha l'attributo class impostato su "img-container". 
Ecco cosa fa ciascuna regola:

.box:
box-shadow: 0 0 0.2em rgba(25,0,58,0.15); imposta un'ombra attorno all'elemento con un'opacità del 15% e un colore specificato 
come rgba(25,0,58), che rappresenta una tonalità di viola scuro.
border-radius: 0.6em; arrotonda gli angoli dell'elemento impostando un raggio di 0.6 "em".
color: black; imposta il colore del testo dell'elemento su nero.
cursor: pointer; imposta il cursore del mouse sull'elemento come un puntatore, indicando che l'elemento è interattivo.*/
.box {
  box-shadow: 0 0 0.2em rgba(25, 0, 58, 0.15);
  padding: 3.5em 1em;
  color: black;
  cursor: pointer;
}
/*margin: 0 auto 2em auto; imposta il margine superiore e inferiore dell'elemento su 2 "em" e 
il margine sinistro e destro su "auto", il che centra l'elemento orizzontalmente all'interno del suo contenitore*/
.box .img-container {
  width: 10em;
  height: 10em;
  background-color: black;
  padding: 0.5em;
  border-radius: 50%;
  margin: 0 auto 3em auto; /* Essenziale sennò l'immagine si sposta verso sinistra */
}
.box img {
  width: 100%;
  border-radius: 25%;
}
.box h3 {
  font-weight: 500;
}
.box p {
  font-weight: 300;
  letter-spacing: 2px;
}
.icons {
  width: 50%;
  min-width: 90px; /* Così gli dico che ci deve essere una distanza minima */
  margin: auto; /*centers the element horizontally within its parent element. This means that the icons will be centered on the page*/
  display: flex;
  justify-content: space-between; /* Spazio tra le icone e con width ho settato quanto */
}
.box a {
  color: red;
  font-size: 3em; /* Setto dimensione link e quindi delle icone */
}
.box a:hover {
  transform: scale(1.1);
}
.box:hover {
  background: linear-gradient(black, #8567f7); /* Transizione tra i colori */
  color: blue;
}
.box:hover .img-container {
  transform: scale(
    1.1
  ); /* Aumenta dimensione dell'immagine quando ci passi sopra */
}

@media screen and (min-width: 768px) {
  section {
    padding: 2em 6em;
  }
}
/*
This media query applies styles when the screen width is at least 768 pixels. 
The section element will have a padding of 1em (top and bottom) and 7em (left and right) when the screen is at least 768 pixels wide.
*/
/*
This media query applies styles when the screen width is at least 992 pixels. 
The section element will have a padding of 1em (top, bottom, left and right) when the screen is at least 992 pixels wide. 
The .box element will have a padding of 5em (top and bottom) and 1em (left and right). 
The .column elements will have a flex value of 0 0 33.33% (which means they will not grow or shrink, and w
ill have a width of one-third of the container), a max-width of 33.33% (to ensure they do not become wider 
than one-third of the container), and a padding of 0 (top and bottom) and 1em (left and right).*/
@media screen and (min-width: 992px) {
  section {
    padding: 1em;
  }
  .box {
    padding: 5em 1em;
  }
  .column {
    flex: 0 0 33.33%;
    max-width: 33.33%;
    padding: 1 1em;
  }
}
h3.hidden {
  display: none;
}
.column:hover h3.hidden {
  display: block;
}
